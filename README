Name: Stephen Porter
Updated: 10/03/2014
Assignment: Project 1

=======
Design
=======
Organization:
  Considerations:
    - Parsing input
      -- Will need to match execvp args
    - Using list
      -- Simple job control
      -- Need an object reflecting a job
        --- Needs to store job id, pid, status, and command input
    - Background processes
      -- Forking and managing parent, children, and zombies
  
  Decisions:
    - I need a main loop, this can be contained in mydash itself
      -- Should own our job list
      -- Will probably own the built in commands (jobs, cd, exit)
      -- Should only worry about itself, no extrenous tasks
    - I need a parser for input, this can be it's own file
      -- Maybe this class can own some check methods for whitespace
      -- Must be able to match execvp's arguments
      -- Can't fully abstract (I think I'll have to manipulate the string)
    - I need some sort of job control, this can be it's own file
      -- Will probably need a handle to our list
      -- Needs the following
        --- Ability to check up on running tasks
        --- Ability to kill jobs (in case of exit while jobs are running)
        --- Ability to clean our list of done jobs
    - 

Testing
  I will use the first example in the mydash example from the examples repo. I will have to touch it up a bit though as it hard codes test paths. I really liked Buff's testing framework for the interpreter assignment in CS 354, I think I'll adapt it to this testing framework to run unit-style tests. I could possibly make it a part of my build process to mimick some continuous integration.

======
Files
======
  .git
  include -- (post make call) - Has all the header files
      common.h - Common typedefs
      JobManager.h
      List.h
      Node.h
      Object.h
      ourhdr.h
      Parser.h
  lib -- (post make call)
      libmylib.a
      libmylib.so
  libsrc
      common.h
      List.c
      List.h
      Makefile
      Node.c
      Node.h
      Object.c	- Implements our job object
      Object.h	- Contains our definition of a job
  test-harness  - Contains unit-style tests for mydash
      run    	- A script to run the tests in this directory
      test-* 	- Test folders containing test information
  doxygen-config
  error.c
  JobManager.c	- Handles all the job control
  Makefile
  mydash.c	- The terminal
  Parser.c	- Handles all user command parsing
  README
  README.dox
  valgrind.supp

===========
Discussion
===========
I both hated and enjoyed this project. I enjoyed learning more about system programming in Linux, and I can definitely say my C has gotten better. I understand a lot more about the Linux OS and systems programming.

Now for the hate. The number one thing that annoyed me was I thought I had a bug in my project which could cost me more points than the 10% off I would receive if I turned it in late. What I thought was a bug was when I sent a background process which printed out to stdout (e.g. ls&) control would not come backto the terminal. I thought this was a bug and I spent two days trying to figure it out. Low and behold, it's the actual behavior of the Linux shell. I theorize it's because the child process has to print out to stdout which leaves some sort of hook until the user inputs something else.

Another war story was the whole readline memory error thing. I spent far too long on that before I saw on Piazza that it has a memory leak and the dox README outlining the suppression.

I have to say some of the things which went wrong with this project took quite some time to figure out. Unfortunately, my personality is that I don't like asking for help on things like this and I want to figure them out on my own, even if that means sacrificing a lot of time on the project.